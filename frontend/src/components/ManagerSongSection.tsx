import React, { useState, useEffect, RefObject } from "react";
import { useLocation } from "react-router-dom";
import Controls from "./Manager_Songs/Controls";
import Lyrics from "./Manager_Songs/Lyrics";
import PopularSongs from "./Manager_Songs/PopularSongs";
import Recommendations from "./Manager_Songs/Recommendations";
import SongHeader from "./Manager_Songs/Song-Header";
import Sidebar from "./Sidebar";

// Import hook useSongManager v√† ki·ªÉu d·ªØ li·ªáu c·ªßa n√≥
// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ch√≠nh x√°c ƒë·∫øn file hook c·ªßa b·∫°n
import useSongManager from "../hooks/Manager_Song_Play"; 
import { Song } from "../hooks/GlobalAudioManager";

// ƒê·ªãnh nghƒ©a (ho·∫∑c import) ki·ªÉu d·ªØ li·ªáu tr·∫£ v·ªÅ c·ªßa hook useSongManager
// Ki·ªÉu n√†y c·∫ßn kh·ªõp v·ªõi nh·ªØng g√¨ hook useSongManager th·ª±c s·ª± tr·∫£ v·ªÅ
interface ISongManagerOutput {
  audioRef: RefObject<HTMLAudioElement | null>;
  songUrl: string | undefined;
  isPlaying: boolean;

  currentTrackId?: string | number | null;    // ID b√†i h√°t hi·ªán t·∫°i t·ª´ hook
}


const ManagerSongSection: React.FC = () => {
  const [bgColor, setBgColor] = useState<string>("#7D3218"); // m√†u m·∫∑c ƒë·ªãnh
  const [sidebarExpanded, setSidebarExpanded] = useState<boolean>(false);
  
  const location = useLocation();
  const songFromState = location.state?.currentSong;
  const [viewSong, setViewSong] = useState(songFromState || null);
  const playlistFromState = location.state?.songs;
  const indexFromState = location.state?.currentIndex;
  const [, setPlaylist] = useState<Song[]>(playlistFromState || []);
  // const [playlist, setPlaylist] = useState<Song[]>(playlistFromState || []);
  // const [playlistIndex, setPlaylistIndex] = useState<number>(
  //   indexFromState !== undefined ? indexFromState : 0
  // );
   const [, setPlaylistIndex] = useState<number>(
    indexFromState !== undefined ? indexFromState : 0
  );

  // 1. S·ª≠ d·ª•ng hook useSongManager ƒë·ªÉ l·∫•y c√°c gi√° tr·ªã c·∫ßn thi·∫øt
  const { 
    currentTrackId, 
    audioRef,      // L·∫•y audioRef t·ª´ hook
    songUrl,       // L·∫•y songUrl t·ª´ hook
    isPlaying  // L·∫•y isPlaying t·ª´ hook
  // L·∫•y togglePlay t·ª´ hook
  }: ISongManagerOutput = useSongManager();

  const handleSidebarExpandChange = (expanded: boolean) => {
    setSidebarExpanded(expanded);
  };

  useEffect(() => {
    // Log ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã currentTrackId m·ªói khi n√≥ thay ƒë·ªïi
    // console.log("ManagerSongSection - currentTrackId from hook:", currentTrackId);
    // console.log("ManagerSongSection - isPlaying from hook:", isPlaying);
  }, [currentTrackId, isPlaying]);

  useEffect(() => {
    if (!songFromState) {
      const songStr = localStorage.getItem("viewedSong");
      const listStr = localStorage.getItem("viewedPlaylist");
      const indexStr = localStorage.getItem("viewedIndex");

    try {
      if (songStr) setViewSong(JSON.parse(songStr));
      if (listStr) setPlaylist(JSON.parse(listStr));
      if (indexStr) setPlaylistIndex(parseInt(indexStr));
    } catch (e) {
      console.error("L·ªói parse t·ª´ localStorage:", e);
    }
  }
}, [songFromState]);

// useEffect(() => {
//   if (playlist.length > 0 && viewSong) {
//     console.log("üß™ Playlist ƒë∆∞·ª£c truy·ªÅn v√†o ManagerSongSection:", playlist.map(s => s.id));
//     const context = {
//       id: `manager-${viewSong.id}`,
//       type: "queue"
//     };
//     GlobalAudioManager.setPlaylist(playlist, playlistIndex, context);
//   }
// }, [playlist, playlistIndex, viewSong]);


useEffect(() => {
  const song = location.state?.currentSong;
  if (song && (!viewSong || song.id !== viewSong.id)) {
    setViewSong(song);
  }
}, [location.state?.currentSong]);

useEffect(() => {
  console.log("üîÅ ManagerSongSection reloaded:", location.state?._forceKey);
}, [location.state?._forceKey]);


  return (
    <div>
      <div className="container">
        <Sidebar onExpandChange={handleSidebarExpandChange} />
        <div className={`song_side_managerment ${sidebarExpanded ? "shrink" : ""}`}>
          <div
            className="Management_song"
            style={{
              background: `linear-gradient(to bottom, ${bgColor}, var(--spotify-black) 50%)`,
            }}
          >
            {/* 2. Truy·ªÅn c√°c gi√° tr·ªã xu·ªëng component con n·∫øu ch√∫ng c·∫ßn */}
            <SongHeader 
              onColorExtract={setBgColor} 
              currentTrackId={viewSong?.id ?? null}
              // currentSong={currentSong} // V√≠ d·ª• n·∫øu SongHeader c·∫ßn th√¥ng tin chi ti·∫øt b√†i h√°t
            />
            <Controls 
              currentTrackId={currentTrackId === undefined ? null : currentTrackId} 
              // Truy·ªÅn c√°c props ƒëi·ªÅu khi·ªÉn nh·∫°c xu·ªëng Controls
              audioRef={audioRef}
              songUrl={songUrl}
              isPlaying={isPlaying}
              
               trackId={viewSong?.id ?? null}
              //  playlistIndex={playlistIndex}
              
            />
            <Lyrics trackId={viewSong?.id ?? null} />
            <Recommendations/>
            <PopularSongs/>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ManagerSongSection;